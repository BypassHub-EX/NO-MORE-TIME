--======================================================
-- CONFIG
--======================================================
local KEY_URL = "https://keysite-production.up.railway.app/public/keys.txt"
local GET_KEY_LINK = "https://loot-link.com/s?gbTnLVac"
local CACHE_FILE = "LazyDevs_LastKey.txt"

--======================================================
-- SERVICES
--======================================================
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local RunService = game:GetService("RunService")
local TeleportService = game:GetService("TeleportService")

--======================================================
-- KEY HANDLING
--======================================================
local function fetchKeys()
    local ok, body = pcall(function() return game:HttpGet(KEY_URL, true) end)
    if not ok or not body then return {} end
    local keys = {}
    for line in string.gmatch(body, "[^\r\n]+") do
        line = string.gsub(line, "^%s*(.-)%s*$", "%1")
        if line ~= "" then table.insert(keys, line) end
    end
    return keys
end

local function isValidKey(userKey)
    for _, k in ipairs(fetchKeys()) do
        if userKey == k then return true end
    end
    return false
end

local function saveCachedKey(key)
    if writefile then pcall(function() writefile(CACHE_FILE, key) end) end
end

local function readCachedKey()
    if readfile and isfile and isfile(CACHE_FILE) then
        local ok, val = pcall(function() return readfile(CACHE_FILE) end)
        if ok and val and #val > 0 then return val end
    end
    return nil
end

--======================================================
-- RAYFIELD
--======================================================
local Rayfield = loadstring(game:HttpGet("https://sirius.menu/rayfield"))()
local HubWindow = Rayfield:CreateWindow({
    Name = "No More Time Hub",
    LoadingTitle = "Welcome Back",
    LoadingSubtitle = "Key Validation",
    Theme = "Ocean",
    ToggleUIKeybind = Enum.KeyCode.K,
    KeySystem = false
})

local hubLoaded, validateBusy = false, false
local AbilityManager = {
    Player = { WalkSpeed = 16, JumpPower = 50, Fly = false, Noclip = false, Godmode = false },
}

--======================================================
-- PLAYER UTILITIES
--======================================================
-- Noclip
RunService.Stepped:Connect(function()
    if AbilityManager.Player.Noclip and LocalPlayer.Character then
        for _, v in pairs(LocalPlayer.Character:GetDescendants()) do
            if v:IsA("BasePart") and v.CanCollide then
                v.CanCollide = false
            end
        end
    end
end)

-- WalkSpeed / JumpPower reset on respawn
LocalPlayer.CharacterAdded:Connect(function(char)
    task.wait(1)
    if char:FindFirstChildOfClass("Humanoid") then
        char:FindFirstChildOfClass("Humanoid").WalkSpeed = AbilityManager.Player.WalkSpeed
        char:FindFirstChildOfClass("Humanoid").JumpPower = AbilityManager.Player.JumpPower
    end
end)

--======================================================
-- FLY (Your Logic, integrated)
--======================================================
local UserInputService = game:GetService("UserInputService")
local flying = false
local flySpeed = 50
local ctrl = {f=0, b=0, l=0, r=0}
local bv, bg

local function startFly()
    local hrp = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
    if not hrp then return end

    bg = Instance.new("BodyGyro", hrp)
    bg.P = 9e4
    bg.maxTorque = Vector3.new(9e9, 9e9, 9e9)
    bg.cframe = hrp.CFrame

    bv = Instance.new("BodyVelocity", hrp)
    bv.velocity = Vector3.new(0,0.1,0)
    bv.maxForce = Vector3.new(9e9, 9e9, 9e9)

    flying = true
    spawn(function()
        while flying do
            task.wait()
            local camCF = workspace.CurrentCamera.CFrame
            local move = Vector3.new(ctrl.l + ctrl.r, 0, ctrl.f + ctrl.b)
            if move.Magnitude > 0 then
                bv.velocity = ((camCF.lookVector * (ctrl.f+ctrl.b)) + ((camCF * CFrame.new(ctrl.l+ctrl.r,(ctrl.f+ctrl.b)*.2,0)).p - camCF.p))*flySpeed
            else
                bv.velocity = Vector3.new(0,0.1,0)
            end
            bg.cframe = camCF
        end
    end)
end

local function stopFly()
    flying = false
    if bg then bg:Destroy() end
    if bv then bv:Destroy() end
end

--======================================================
-- HUB TABS
--======================================================
local function loadHubTabs()
    if hubLoaded then return end
    hubLoaded = true

    -- Info
    local InfoTab = HubWindow:CreateTab("Information")
    InfoTab:CreateSection("About")
    InfoTab:CreateLabel("No More Time Hub")
    InfoTab:CreateLabel("Secure • Optimal • Free")
    InfoTab:CreateLabel("Version 1.0.0")

    -- Player
    local PlayerTab = HubWindow:CreateTab("Player")
    PlayerTab:CreateSection("Movement")
    PlayerTab:CreateSlider({ Name="WalkSpeed", Range={16,200}, Increment=1, CurrentValue=16, Callback=function(v)
        AbilityManager.Player.WalkSpeed=v
        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid") then
            LocalPlayer.Character:FindFirstChildOfClass("Humanoid").WalkSpeed=v
        end
    end })
    PlayerTab:CreateSlider({ Name="JumpPower", Range={50,300}, Increment=5, CurrentValue=50, Callback=function(v)
        AbilityManager.Player.JumpPower=v
        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid") then
            LocalPlayer.Character:FindFirstChildOfClass("Humanoid").JumpPower=v
        end
    end })
    PlayerTab:CreateToggle({ Name="Fly", CurrentValue=false, Callback=function(v)
        if v then startFly() else stopFly() end
        AbilityManager.Player.Fly=v
    end })
    PlayerTab:CreateSlider({ Name="Fly Speed", Range={10,200}, Increment=5, CurrentValue=50, Callback=function(v) flySpeed=v end })
    PlayerTab:CreateToggle({ Name="Noclip", CurrentValue=false, Callback=function(v) AbilityManager.Player.Noclip=v end })
    PlayerTab:CreateToggle({ Name="Godmode", CurrentValue=false, Callback=function(v) AbilityManager.Player.Godmode=v end })

    -- Map Tools
    local MapTab = HubWindow:CreateTab("Map Tools")
    MapTab:CreateSection("Teleport")
    MapTab:CreateButton({ Name="Teleport to Start", Callback=function()
        Rayfield:Notify({Title="Map Tools", Content="Coming Soon", Duration=3})
    end })
    MapTab:CreateButton({ Name="Teleport to End", Callback=function()
        Rayfield:Notify({Title="Map Tools", Content="Coming Soon", Duration=3})
    end })

    -- Server
    local ServerTab = HubWindow:CreateTab("Server")
    ServerTab:CreateButton({ Name="Rejoin", Callback=function() TeleportService:Teleport(game.PlaceId, LocalPlayer) end })
    ServerTab:CreateButton({ Name="Copy Job ID", Callback=function() if setclipboard then setclipboard(game.JobId) end end })

    -- Theme
    local ThemeTab = HubWindow:CreateTab("Themes")
    ThemeTab:CreateButton({ Name="Ocean", Callback=function() HubWindow:SetTheme("Ocean") end })
    ThemeTab:CreateButton({ Name="Dark", Callback=function() HubWindow:SetTheme("Dark") end })
    ThemeTab:CreateButton({ Name="Light", Callback=function() HubWindow:SetTheme("Light") end })
end

--======================================================
-- KEY TAB
--======================================================
local KeyTab = HubWindow:CreateTab("Key")
local statusLabel = KeyTab:CreateLabel("Status: idle")
local currentKey = rawget(getfenv(), "key") or readCachedKey() or ""

KeyTab:CreateInput({
    Name="Enter Key",
    CurrentValue=currentKey,
    Callback=function(text) currentKey=text end
})
KeyTab:CreateButton({
    Name="Validate Key",
    Callback=function()
        if validateBusy or hubLoaded then return end
        validateBusy=true
        if currentKey~="" and isValidKey(currentKey) then
            statusLabel:Set("Status: ✅ Valid")
            saveCachedKey(currentKey)
            loadHubTabs()
        else
            statusLabel:Set("Status: ❌ Invalid")
            Rayfield:Notify({Title="Key",Content="Invalid key.",Duration=3})
        end
        validateBusy=false
    end
})

-- Skip key tab if key provided at top
if currentKey~="" and isValidKey(currentKey) then
    statusLabel:Set("Status: Cached key valid")
    loadHubTabs()
end
