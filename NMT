-- =======================================================
-- CONFIG
-- =======================================================
local KEY_URL = "https://keysite-production.up.railway.app/public/keys.txt"
local GET_KEY_LINK = "https://loot-link.com/s?gbTnLVac"
local CACHE_FILE = "LazyDevs_LastKey.txt"

-- =======================================================
-- SERVICES
-- =======================================================
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local TeleportService = game:GetService("TeleportService")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Stats = game:FindFirstChild("Stats")

-- =======================================================
-- KEY HELPERS
-- =======================================================
local function fetchKeys()
    local ok, body = pcall(function() return game:HttpGet(KEY_URL, true) end)
    if not ok or not body then return {} end
    local keys = {}
    for line in string.gmatch(body, "[^\r\n]+") do
        local key = string.gsub(line, "^%s*(.-)%s*$", "%1")
        if key ~= "" then table.insert(keys, key) end
    end
    return keys
end

local function isValidKey(userKey)
    if not userKey or #userKey == 0 then return false end
    for _, k in ipairs(fetchKeys()) do
        if userKey == k then return true end
    end
    return false
end

local function saveCachedKey(key)
    if writefile then pcall(function() writefile(CACHE_FILE, key) end) end
end

local function readCachedKey()
    if readfile and isfile and isfile(CACHE_FILE) then
        local ok, val = pcall(function() return readfile(CACHE_FILE) end)
        if ok and val and #val > 0 then return val end
    end
    return nil
end

-- =======================================================
-- LOAD RAYFIELD
-- =======================================================
local Rayfield = loadstring(game:HttpGet("https://sirius.menu/rayfield"))()
local HubWindow = Rayfield:CreateWindow({
    Name = "Lazy Devs | No More Time Hub",
    LoadingTitle = "Welcome Back",
    LoadingSubtitle = "Authentication Required",
    Theme = "Ocean",
    ToggleUIKeybind = Enum.KeyCode.K,
    KeySystem = false
})

local hubLoaded, validateBusy = false, false
local AbilityManager = {
    Player  = { SpeedBoost = 16, JumpBoostValue = 50, AirWalk = false, NoClip = false },
    Game    = { GodMode = false, Fly = false, TrollLoop = false, HelpLoop = false }
}

-- =======================================================
-- UNIVERSAL TELEPORT TO END LOGIC
-- =======================================================
local FINISH_NAMES = { "finish","end","goal","exit","win" }

local function containsAny(name, list)
    local n = string.lower(name or "")
    for _,kw in ipairs(list) do
        if string.find(n, kw) then return true end
    end
    return false
end

local function safeHRP(char)
    if not char then return nil end
    return char:FindFirstChild("HumanoidRootPart")
end

local function findFinishPart(model)
    for _,inst in ipairs(model:GetDescendants()) do
        if inst:IsA("BasePart") and containsAny(inst.Name, FINISH_NAMES) then
            return inst
        end
    end
end

local function getActiveMapModel()
    for _,child in ipairs(workspace:GetChildren()) do
        if child:IsA("Model") and child:FindFirstChildWhichIsA("BasePart") then
            local finish = findFinishPart(child)
            if finish then return child, finish end
        end
    end
end

local function teleportToMapEnd()
    local char = LocalPlayer.Character
    local hrp = safeHRP(char)
    if not hrp then return end

    local mapModel, finishPart = getActiveMapModel()
    if finishPart then
        hrp.CFrame = finishPart.CFrame + Vector3.new(0,4,0)
        Rayfield:Notify({Title="TP",Content="Teleported to End",Duration=3})
    else
        Rayfield:Notify({Title="TP",Content="No Finish Found",Duration=3})
    end
end

-- =======================================================
-- LOAD HUB TABS
-- =======================================================
local function loadHubTabs()
    if hubLoaded then return end
    hubLoaded = true

    -- Info
    local InfoTab = HubWindow:CreateTab("Information")
    InfoTab:CreateLabel("Lazy Devs | No More Time Hub")
    InfoTab:CreateLabel("Developed by Lazy Devs")
    InfoTab:CreateLabel("Version 1.0.0")

    -- Player
    local PlayerTab = HubWindow:CreateTab("Player")
    PlayerTab:CreateSlider({
        Name = "Speed Boost",
        Range = {16,150},
        Increment = 2,
        CurrentValue = 16,
        Callback = function(val) AbilityManager.Player.SpeedBoost = val end
    })
    PlayerTab:CreateSlider({
        Name = "Jump Boost",
        Range = {0,175},
        Increment = 5,
        CurrentValue = 50,
        Callback = function(val) AbilityManager.Player.JumpBoostValue = val end
    })
    PlayerTab:CreateToggle({ Name = "AirWalk", CurrentValue = false, Callback = function(v) AbilityManager.Player.AirWalk = v end })
    PlayerTab:CreateToggle({ Name = "NoClip", CurrentValue = false, Callback = function(v) AbilityManager.Player.NoClip = v end })

    -- Game
    local GameTab = HubWindow:CreateTab("Game")
    GameTab:CreateToggle({ Name = "GodMode", CurrentValue = false, Callback = function(v) AbilityManager.Game.GodMode = v end })
    GameTab:CreateToggle({ Name = "Fly", CurrentValue = false, Callback = function(v) AbilityManager.Game.Fly = v end })
    GameTab:CreateToggle({ Name = "Troll Players Loop", CurrentValue = false, Callback = function(v) AbilityManager.Game.TrollLoop = v end })
    GameTab:CreateToggle({ Name = "Help Players Loop", CurrentValue = false, Callback = function(v) AbilityManager.Game.HelpLoop = v end })
    GameTab:CreateButton({ Name = "Teleport to End", Callback = function() teleportToMapEnd() end })
end

-- =======================================================
-- KEY TAB
-- =======================================================
local KeyTab = HubWindow:CreateTab("Key")
KeyTab:CreateSection("Validation")
local statusLabel = KeyTab:CreateLabel("Status: idle")
local currentKey = readCachedKey() or ""
KeyTab:CreateInput({ Name = "Enter Key", PlaceholderText = "Paste your key...", CurrentValue = currentKey, Callback = function(text) currentKey = text end })
KeyTab:CreateButton({
    Name = "Validate Key",
    Callback = function()
        if validateBusy or hubLoaded then return end
        validateBusy = true
        if isValidKey(currentKey) then
            statusLabel:Set("Status: ✅ Valid")
            saveCachedKey(currentKey)
            loadHubTabs()
            KeyTab.TabFrame.Visible = false
        else
            statusLabel:Set("Status: ❌ Invalid")
        end
        validateBusy = false
    end
})

if currentKey ~= "" and isValidKey(currentKey) then
    statusLabel:Set("Status: Cached key valid")
    loadHubTabs()
    KeyTab.TabFrame.Visible = false
end
