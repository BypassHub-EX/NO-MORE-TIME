--======================================================
-- CONFIG
--======================================================
local KEY_URL = "https://keysite-production.up.railway.app/public/keys.txt"
local GET_KEY_LINK = "https://loot-link.com/s?gbTnLVac"
local CACHE_FILE = "LazyDevs_LastKey.txt"

--======================================================
-- SERVICES
--======================================================
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local RunService = game:GetService("RunService")
local TeleportService = game:GetService("TeleportService")
local Stats = game:FindFirstChild("Stats")

--======================================================
-- HELPERS
--======================================================
local function fetchKeys()
    local ok, body = pcall(function() return game:HttpGet(KEY_URL, true) end)
    if not ok or not body then return {} end
    local keys = {}
    for line in string.gmatch(body, "[^\r\n]+") do
        local k = string.gsub(line, "^%s*(.-)%s*$", "%1")
        if k ~= "" then table.insert(keys, k) end
    end
    return keys
end

local function isValidKey(userKey)
    if not userKey or #userKey == 0 then return false end
    for _, k in ipairs(fetchKeys()) do
        if userKey == k then return true end
    end
    return false
end

local function saveCachedKey(key)
    if writefile then pcall(function() writefile(CACHE_FILE, key) end) end
end

local function readCachedKey()
    if readfile and isfile and isfile(CACHE_FILE) then
        local ok, val = pcall(function() return readfile(CACHE_FILE) end)
        if ok and val and #val > 0 then return val end
    end
    return nil
end

--======================================================
-- RAYFIELD
--======================================================
local Rayfield = loadstring(game:HttpGet("https://sirius.menu/rayfield"))()
assert(Rayfield, "Rayfield failed to load")

local HubWindow = Rayfield:CreateWindow({
    Name = "LazyDevs | No More Time Hub",
    LoadingTitle = "Secure • Optimal • Free",
    LoadingSubtitle = "Key Authentication",
    Theme = "Ocean",
    ToggleUIKeybind = Enum.KeyCode.K,
    KeySystem = false
})

local hubLoaded, validateBusy = false, false
local AbilityManager = {
    Player = { Fly = false, SpeedBoost = false, SpeedValue = 16, JumpBoost = false, JumpValue = 50, Noclip = false, GodMode = false }
}

--======================================================
-- PLAYER LOOP
--======================================================
RunService.Heartbeat:Connect(function()
    local char = LocalPlayer.Character
    if not char then return end
    local hum = char:FindFirstChildOfClass("Humanoid")
    if not hum then return end

    -- Speed
    if AbilityManager.Player.SpeedBoost then
        hum.WalkSpeed = AbilityManager.Player.SpeedValue
    else
        hum.WalkSpeed = 16
    end

    -- Jump
    if AbilityManager.Player.JumpBoost then
        hum.UseJumpPower = true
        hum.JumpPower = AbilityManager.Player.JumpValue
    else
        hum.JumpPower = 50
    end

    -- Noclip
    if AbilityManager.Player.Noclip then
        for _, p in pairs(char:GetDescendants()) do
            if p:IsA("BasePart") and p.CanCollide then
                p.CanCollide = false
            end
        end
    end
end)

--======================================================
-- GODMODE (Prototype)
--======================================================
local function enableGodMode()
    local char = LocalPlayer.Character
    if not char then return end
    local hum = char:FindFirstChildOfClass("Humanoid")
    if hum then
        hum.NameDisplayDistance = 0
        hum.Health = math.huge
        hum.MaxHealth = math.huge
    end
end

--======================================================
-- HUB TABS
--======================================================
local function loadHubTabs()
    if hubLoaded then return end
    hubLoaded = true

    -- Info
    local InfoTab = HubWindow:CreateTab("Information")
    InfoTab:CreateLabel("LazyDevs No More Time Hub")
    InfoTab:CreateLabel("Secure • Optimal • Free")
    InfoTab:CreateLabel("Version 1.0.0")

    -- Player
    local PlayerTab = HubWindow:CreateTab("Player")
    PlayerTab:CreateToggle({ Name = "Fly", CurrentValue = false, Callback = function(v) AbilityManager.Player.Fly = v end })
    PlayerTab:CreateToggle({ Name = "Noclip", CurrentValue = false, Callback = function(v) AbilityManager.Player.Noclip = v end })
    PlayerTab:CreateToggle({ Name = "Speed Boost", CurrentValue = false, Callback = function(v) AbilityManager.Player.SpeedBoost = v end })
    PlayerTab:CreateSlider({ Name = "Speed Value", Range = {16,200}, Increment = 1, CurrentValue = 16, Callback = function(val) AbilityManager.Player.SpeedValue = val end })
    PlayerTab:CreateToggle({ Name = "Jump Boost", CurrentValue = false, Callback = function(v) AbilityManager.Player.JumpBoost = v end })
    PlayerTab:CreateSlider({ Name = "Jump Power", Range = {50,250}, Increment = 5, CurrentValue = 50, Callback = function(val) AbilityManager.Player.JumpValue = val end })
    PlayerTab:CreateToggle({ Name = "God Mode", CurrentValue = false, Callback = function(v) AbilityManager.Player.GodMode = v if v then enableGodMode() end end })

    -- Map Tools
    local MapTab = HubWindow:CreateTab("Map Tools")
    MapTab:CreateButton({ Name = "Find Start", Callback = function() Rayfield:Notify({ Title="Map Tools", Content="Coming Soon", Duration=4 }) end })
    MapTab:CreateButton({ Name = "Find End", Callback = function() Rayfield:Notify({ Title="Map Tools", Content="Coming Soon", Duration=4 }) end })

    -- Themes
    local ThemeTab = HubWindow:CreateTab("Themes")
    ThemeTab:CreateDropdown({
        Name = "Theme Selector",
        Options = {"Ocean","Default","Amber","Serpent"},
        CurrentOption = {"Ocean"},
        Callback = function(opt)
            HubWindow:SetTheme(opt[1])
            Rayfield:Notify({ Title="Theme", Content="Theme set to "..opt[1], Duration=3 })
        end
    })
end

--======================================================
-- KEY TAB
--======================================================
local KeyTab = HubWindow:CreateTab("Key")
local statusLabel = KeyTab:CreateLabel("Status: idle")
local currentKey = readCachedKey() or ""

KeyTab:CreateInput({
    Name = "Enter Key",
    PlaceholderText = "Paste key...",
    CurrentValue = currentKey,
    Callback = function(text) currentKey = text end
})

KeyTab:CreateButton({
    Name = "Validate Key",
    Callback = function()
        if validateBusy or hubLoaded then return end
        validateBusy = true
        local k = (currentKey or ""):gsub("^%s+",""):gsub("%s+$","")
        if k == "" then
            Rayfield:Notify({ Title="Key", Content="Enter a key", Duration=3 })
            validateBusy = false
            return
        end
        if isValidKey(k) then
            statusLabel:Set("Status: ✅ Valid")
            saveCachedKey(k)
            loadHubTabs()
        else
            statusLabel:Set("Status: ❌ Invalid")
        end
        validateBusy = false
    end
})

--======================================================
-- PRE-CHECK: skip KeyTab if key provided
--======================================================
do
    local providedKey = _G.key or key
    if providedKey and type(providedKey) == "string" and providedKey ~= "" then
        if isValidKey(providedKey) then
            saveCachedKey(providedKey)
            loadHubTabs()
        else
            Rayfield:Notify({ Title="Key", Content="Invalid provided key", Duration=4 })
        end
    elseif currentKey ~= "" and isValidKey(currentKey) then
        statusLabel:Set("Status: Cached key valid")
        loadHubTabs()
    end
end
