--======================================================
-- CONFIG
--======================================================
local KEY_URL = "https://keysite-production.up.railway.app/public/keys.txt"
local GET_KEY_LINK = "https://loot-link.com/s?gbTnLVac"
local CACHE_FILE = "LazyDevs_LastKey.txt"

--======================================================
-- SERVICES
--======================================================
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local TeleportService = game:GetService("TeleportService")
local RunService = game:GetService("RunService")
local Stats = game:FindFirstChild("Stats")

--======================================================
-- KEY HELPERS
--======================================================
local function fetchKeys()
    local ok, body = pcall(function() return game:HttpGet(KEY_URL, true) end)
    if not ok or not body then return {} end
    local keys = {}
    for line in string.gmatch(body, "[^\r\n]+") do
        local key = string.gsub(line, "^%s*(.-)%s*$", "%1")
        if key ~= "" then table.insert(keys, key) end
    end
    return keys
end

local function isValidKey(userKey)
    if not userKey or #userKey == 0 then return false end
    for _, k in ipairs(fetchKeys()) do
        if userKey == k then return true end
    end
    return false
end

local function saveCachedKey(key)
    if writefile then pcall(function() writefile(CACHE_FILE, key) end) end
end

local function readCachedKey()
    if readfile and isfile and isfile(CACHE_FILE) then
        local ok, val = pcall(function() return readfile(CACHE_FILE) end)
        if ok and val and #val > 0 then return val end
    end
    return nil
end

--======================================================
-- RAYFIELD
--======================================================
local Rayfield = loadstring(game:HttpGet("https://sirius.menu/rayfield"))()
assert(Rayfield, "Failed to load Rayfield")

local HubWindow = Rayfield:CreateWindow({
    Name = "Lazy Devs | No More Time Hub",
    LoadingTitle = "Welcome Back",
    LoadingSubtitle = "Optimized • Secure • Free",
    Theme = "Ocean",
    ToggleUIKeybind = Enum.KeyCode.K,
    KeySystem = false
})

local hubLoaded, validateBusy = false, false
local AbilityManager = {
    Player = { WalkSpeed = 16, JumpPower = 50, Fly = false, FlySpeed = 50, NoClip = false, GodMode = false, AntiAFK = false }
}

--======================================================
-- MOVEMENT HELPERS
--======================================================
local noclipConn
RunService.Heartbeat:Connect(function()
    if AbilityManager.Player.WalkSpeed and LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid") then
        LocalPlayer.Character:FindFirstChildOfClass("Humanoid").WalkSpeed = AbilityManager.Player.WalkSpeed
    end
    if AbilityManager.Player.JumpPower and LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid") then
        LocalPlayer.Character:FindFirstChildOfClass("Humanoid").JumpPower = AbilityManager.Player.JumpPower
    end
end)

--======================================================
-- HUB TABS
--======================================================
local function loadHubTabs()
    if hubLoaded then return end
    hubLoaded = true

    -- Info
    local InfoTab = HubWindow:CreateTab("Information")
    InfoTab:CreateSection("About")
    InfoTab:CreateLabel("Lazy Devs | No More Time Hub")
    InfoTab:CreateLabel("Optimized • Secure • Free")
    InfoTab:CreateLabel("Version 1.0.0")

    -- Status
    local StatusTab = HubWindow:CreateTab("Status")
    StatusTab:CreateSection("Session")
    local fpsLabel = StatusTab:CreateLabel("FPS: —")
    local pingLabel = StatusTab:CreateLabel("Ping: —")
    StatusTab:CreateLabel("PlaceId: "..tostring(game.PlaceId))
    local jobLabel = StatusTab:CreateLabel("JobId: "..(tostring(game.JobId) or "—"))
    -- FPS counter
    local frames, last = 0, os.clock()
    RunService.RenderStepped:Connect(function()
        frames += 1
        local now = os.clock()
        if now - last >= 1 then
            fpsLabel:Set("FPS: "..tostring(math.floor(frames / (now - last))))
            frames, last = 0, now
        end
    end)
    task.spawn(function()
        local netstat = Stats and Stats.Network
        while task.wait(1) do
            local pingVal = "—"
            if netstat and netstat.ServerStatsItem then
                local item = netstat.ServerStatsItem["Data Ping"]
                if item then
                    local ok2, str = pcall(function() return item:GetValueString() end)
                    if ok2 and str then pingVal = str end
                end
            end
            pingLabel:Set("Ping: "..tostring(pingVal))
            jobLabel:Set("JobId: "..tostring(game.JobId))
        end
    end)

    -- Player
    local PlayerTab = HubWindow:CreateTab("Player")

    PlayerTab:CreateSection("Movement")
    PlayerTab:CreateSlider({ Name = "WalkSpeed", Range = {16,200}, Increment = 1, CurrentValue = 16, Callback = function(val) AbilityManager.Player.WalkSpeed = val end })
    PlayerTab:CreateSlider({ Name = "JumpPower", Range = {50,200}, Increment = 5, CurrentValue = 50, Callback = function(val) AbilityManager.Player.JumpPower = val end })
    PlayerTab:CreateToggle({ Name = "Fly (UI Button)", CurrentValue = false, Callback = function(v) AbilityManager.Player.Fly = v end })
    PlayerTab:CreateSlider({ Name = "Fly Speed", Range = {10,200}, Increment = 5, CurrentValue = 50, Callback = function(val) AbilityManager.Player.FlySpeed = val end })
    PlayerTab:CreateToggle({ Name = "NoClip", CurrentValue = false, Callback = function(v)
        AbilityManager.Player.NoClip = v
        if v then
            noclipConn = RunService.Stepped:Connect(function()
                if LocalPlayer.Character then
                    for _, part in ipairs(LocalPlayer.Character:GetDescendants()) do
                        if part:IsA("BasePart") then part.CanCollide = false end
                    end
                end
            end)
        else
            if noclipConn then noclipConn:Disconnect() end
        end
    end })

    PlayerTab:CreateSection("Survivability")
    PlayerTab:CreateToggle({ Name = "Godmode", CurrentValue = false, Callback = function(v) AbilityManager.Player.GodMode = v end })

    PlayerTab:CreateSection("Utility")
    PlayerTab:CreateToggle({ Name = "Anti-AFK", CurrentValue = false, Callback = function(v) AbilityManager.Player.AntiAFK = v end })
    PlayerTab:CreateButton({ Name = "Teleport to Start", Callback = function() Rayfield:Notify({Title="Coming Soon",Content="Start TP logic"}) end })
    PlayerTab:CreateButton({ Name = "Teleport to End", Callback = function() Rayfield:Notify({Title="Coming Soon",Content="End TP logic"}) end })

    -- Tools
    local ToolsTab = HubWindow:CreateTab("Tools")
    ToolsTab:CreateSection("Server")
    ToolsTab:CreateButton({ Name = "Rejoin", Callback = function() TeleportService:Teleport(game.PlaceId, LocalPlayer) end })
    ToolsTab:CreateButton({ Name = "Copy Job ID", Callback = function() if setclipboard then setclipboard(game.JobId) end end })

    -- MapTools (Coming Soon)
    local MapTab = HubWindow:CreateTab("Map Tools")
    MapTab:CreateSection("Map Utilities")
    MapTab:CreateLabel("Coming Soon: Start/End detection for all maps")

    -- Theme
    local ThemeTab = HubWindow:CreateTab("Theme")
    ThemeTab:CreateSection("Customize")
    ThemeTab:CreateDropdown({
        Name = "Theme",
        Options = {"Ocean","Light","Dark"},
        CurrentOption = {"Ocean"},
        Callback = function(opt)
            HubWindow:SetTheme(opt[1])
        end
    })
end

--======================================================
-- KEY TAB
--======================================================
local KeyTab = HubWindow:CreateTab("Key")
KeyTab:CreateSection("Validation")

local statusLabel = KeyTab:CreateLabel("Status: idle")
local currentKey = readCachedKey() or ""

KeyTab:CreateInput({
    Name = "Enter Key",
    PlaceholderText = "Paste your key...",
    CurrentValue = currentKey,
    Callback = function(text) currentKey = text end
})

KeyTab:CreateButton({
    Name = "Validate Key",
    Callback = function()
        if validateBusy or hubLoaded then return end
        validateBusy = true
        local key = (currentKey or ""):gsub("^%s+",""):gsub("%s+$","")
        if key == "" then
            Rayfield:Notify({ Title = "Key", Content = "Please enter a key.", Duration = 3 })
            validateBusy = false
            return
        end
        local ok, valid = pcall(isValidKey, key)
        if ok and valid then
            statusLabel:Set("Status: ✅ Valid")
            Rayfield:Notify({ Title = "Key", Content = "Key accepted.", Duration = 3 })
            saveCachedKey(key)
            loadHubTabs()
        else
            statusLabel:Set("Status: ❌ Invalid")
            Rayfield:Notify({ Title = "Key", Content = "Invalid key.", Duration = 3 })
        end
        validateBusy = false
    end
})

KeyTab:CreateButton({
    Name = "Get Key",
    Callback = function()
        if setclipboard then
            setclipboard(GET_KEY_LINK)
            Rayfield:Notify({ Title = "Get Key", Content = "Link copied to clipboard.", Duration = 3 })
        else
            Rayfield:Notify({ Title = "Get Key", Content = GET_KEY_LINK, Duration = 5 })
        end
    end
})

-- Cached check
do
    local cached = readCachedKey()
    if cached and cached ~= "" then
        local ok, valid = pcall(isValidKey, cached)
        if ok and valid then
            statusLabel:Set("Status: Cached key valid")
            loadHubTabs()
        end
    end
end
